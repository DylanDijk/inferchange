task_id <- 1
library(parallel)
# Initialise L'Ecuyer's ?RngStreams?
RNGkind("L'Ecuyer-CMRG")
set.seed(12345)
# fetch seed for this task_id's substream
s <- .Random.seed
for (i in 1:task_id) {
s <- nextRNGStream(s)
# send s to worker i as .Random.seed
}
.Random.seed <- s
source("functions_for_CPA.R")
source("functions_for_data_generation.R")
source("functions_for_classical_locating.R")
N <- seq(100, 500, by = 30) # length = 14
THETA <- c(-0.4, -0.2, 0, 0.2, 0.4) # length = 5
d <- 1
S <- c(0.8, 1.2, 1.5, 2, 2.5) # length = 5
WS <- c(0.35, 0.5, 0.65) # length = 3
sd <- 0.5
nexp <- 100000
alpha = 0.05
cfg <- list()
for(n in N){
for(s in S){
for(theta in THETA){
for(ws in WS){
cfg <- c(cfg, list(list(n  = n, theta = theta, s = s, ws = ws
)))
}
}
}
}
# detach parameters from configuration
n  <- cfg[[task_id]]$n
s <- cfg[[task_id]]$s
theta <- cfg[[task_id]]$theta
tau <- floor(n * 0.4)
ws <- cfg[[task_id]]$ws
k <- floor(n^ws)
z_prime <- generate_z_prime(10000, theta, sd, burn_in = 1000)
z_prime_mean <- z_prime$mean
z_prime_sigma <- z_prime$sigma
error_tw <- numeric()
error_cs <- numeric()
error_ac <- numeric()
serror_tw <- numeric()
serror_cs <- numeric()
serror_ac <- numeric()
library(glmnet)
cv.glmnet
help("cv.glmnet")
create_github_token()
help("create_github_token")
help("create_package")
create_package()
create_package("mcs")
create_package("/home/tkley/GitRepos/mcs")
library(changepoints)
library(changepoint)
help(cpt.mean)
citation(changepoint)
citation("changepoint)
citation("changepoint")
citation("changepoint")
toBibtex(citation("changepoint"))
toBibtex(citation("wbs"))
library(wbs)
help(sbs)
9*35+8*12+8*20
11*35+10*12+10*20
library(mvtnorm)
help(mvnorm)
help(mnorm)
help(rmvnorm)
library(mvtnorm)
g <- function(rho) {
return(pmvnorm(upper = c(0,0), corr = matrix(c(1,rho, rho,1), nrow = 2))  )
}
g <- Vectorize(g)
rho <- seq(-0.9, 0.9, 0.01)
plot(rho, g(rho), type = "l")
library(mvtnorm)
g <- function(rho) {
return(pmvnorm(upper = c(0,0), corr = matrix(c(1,rho, rho,1), nrow = 2))  )
}
g <- Vectorize(g)
rho <- seq(-0.99, 0.99, 0.01)
plot(rho, g(rho), type = "l")
library(available)
install.packages("available")
library(available)
available("inferchange")
library(usethis)
help("create_from_github")
usethis::create_from_github(
"git@github.com:tobiaskley/inferchange.git",
destdir = "/home/tkley/GitRepos"
)
gh_token_help()
usethis::git_sitrep()
usethis::create_github_token()
gitcreds::gitcreds_set()
usethis::create_from_github(
"https://github.com/tobiaskley/inferchange.git",
destdir = "/home/tkley/GitRepos"
)
gh_token_help()
gitcreds::gitcreds_set()
usethis::create_from_github(
"https://github.com/tobiaskley/inferchange.git",
destdir = "/home/tkley/GitRepos"
)
library(PRIMAL)
help("Dantzig_solver")
document()
setwd("~/GitRepos/inferchange")
document()
warnings()
document()
document()
document()
load_all()
help(inferchange)
help(CLOM)
help(clom)
devtools::check()
document()
document()
document()
load_all()
devtools::check()
document()
load_all()
devtools::check()
document()
load_all()
devtools::check()
